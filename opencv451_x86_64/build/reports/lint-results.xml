<?xml version="1.0" encoding="UTF-8"?>
<issues format="5" by="lint 4.0.2">

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are never enabled in Android. Use `BuildConfig.DEBUG` conditional checks instead"
        category="Correctness"
        priority="6"
        summary="Ignored Assertions"
        explanation="Assertions will never be turned on in Android. (It was possible to enable it in Dalvik with `adb shell setprop debug.assert 1`, but it is not implemented in ART, the runtime for Android 5.0 and later.)&#xA;&#xA;This means that the assertion will never catch mistakes, and you should not use assertions from Java or Kotlin for debug build checking.&#xA;&#xA;Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which will be true only in debug builds, and false in release builds, and the compiler will completely remove all code inside the `if`-body from the app.&#xA;&#xA;For example, you can replace&#xA;```&#xA;    assert(speed > 0, { &quot;Message&quot; })    // Kotlin&#xA;    assert speed > 0 : &quot;Message&quot;        // Java&#xA;```&#xA;with&#xA;```&#xA;    if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) {&#xA;        throw new AssertionError(&quot;Message&quot;)&#xA;    }&#xA;```&#xA;(Note: This lint check does not flag assertions purely asserting nullness or non-nullness in Java code; these are typically more intended for tools usage than runtime checks.)"
        errorLine1="                    assert (planes.length == 3);"
        errorLine2="                    ~~~~~~">
        <location
            file="C:\Users\nalensa\EstesProj\EstesLibrary\opencv451_x86_64\java\src\org\opencv\android\JavaCamera2View.java"
            line="183"
            column="21"/>
    </issue>

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are never enabled in Android. Use `BuildConfig.DEBUG` conditional checks instead"
        category="Correctness"
        priority="6"
        summary="Ignored Assertions"
        explanation="Assertions will never be turned on in Android. (It was possible to enable it in Dalvik with `adb shell setprop debug.assert 1`, but it is not implemented in ART, the runtime for Android 5.0 and later.)&#xA;&#xA;This means that the assertion will never catch mistakes, and you should not use assertions from Java or Kotlin for debug build checking.&#xA;&#xA;Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which will be true only in debug builds, and false in release builds, and the compiler will completely remove all code inside the `if`-body from the app.&#xA;&#xA;For example, you can replace&#xA;```&#xA;    assert(speed > 0, { &quot;Message&quot; })    // Kotlin&#xA;    assert speed > 0 : &quot;Message&quot;        // Java&#xA;```&#xA;with&#xA;```&#xA;    if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) {&#xA;        throw new AssertionError(&quot;Message&quot;)&#xA;    }&#xA;```&#xA;(Note: This lint check does not flag assertions purely asserting nullness or non-nullness in Java code; these are typically more intended for tools usage than runtime checks.)"
        errorLine1="                    assert (image.getFormat() == mPreviewFormat);"
        errorLine2="                    ~~~~~~">
        <location
            file="C:\Users\nalensa\EstesProj\EstesLibrary\opencv451_x86_64\java\src\org\opencv\android\JavaCamera2View.java"
            line="184"
            column="21"/>
    </issue>

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are never enabled in Android. Use `BuildConfig.DEBUG` conditional checks instead"
        category="Correctness"
        priority="6"
        summary="Ignored Assertions"
        explanation="Assertions will never be turned on in Android. (It was possible to enable it in Dalvik with `adb shell setprop debug.assert 1`, but it is not implemented in ART, the runtime for Android 5.0 and later.)&#xA;&#xA;This means that the assertion will never catch mistakes, and you should not use assertions from Java or Kotlin for debug build checking.&#xA;&#xA;Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which will be true only in debug builds, and false in release builds, and the compiler will completely remove all code inside the `if`-body from the app.&#xA;&#xA;For example, you can replace&#xA;```&#xA;    assert(speed > 0, { &quot;Message&quot; })    // Kotlin&#xA;    assert speed > 0 : &quot;Message&quot;        // Java&#xA;```&#xA;with&#xA;```&#xA;    if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) {&#xA;        throw new AssertionError(&quot;Message&quot;)&#xA;    }&#xA;```&#xA;(Note: This lint check does not flag assertions purely asserting nullness or non-nullness in Java code; these are typically more intended for tools usage than runtime checks.)"
        errorLine1="            assert(!(frameSize.width == 0 || frameSize.height == 0));"
        errorLine2="            ~~~~~~">
        <location
            file="C:\Users\nalensa\EstesProj\EstesLibrary\opencv451_x86_64\java\src\org\opencv\android\JavaCamera2View.java"
            line="282"
            column="13"/>
    </issue>

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are never enabled in Android. Use `BuildConfig.DEBUG` conditional checks instead"
        category="Correctness"
        priority="6"
        summary="Ignored Assertions"
        explanation="Assertions will never be turned on in Android. (It was possible to enable it in Dalvik with `adb shell setprop debug.assert 1`, but it is not implemented in ART, the runtime for Android 5.0 and later.)&#xA;&#xA;This means that the assertion will never catch mistakes, and you should not use assertions from Java or Kotlin for debug build checking.&#xA;&#xA;Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which will be true only in debug builds, and false in release builds, and the compiler will completely remove all code inside the `if`-body from the app.&#xA;&#xA;For example, you can replace&#xA;```&#xA;    assert(speed > 0, { &quot;Message&quot; })    // Kotlin&#xA;    assert speed > 0 : &quot;Message&quot;        // Java&#xA;```&#xA;with&#xA;```&#xA;    if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) {&#xA;        throw new AssertionError(&quot;Message&quot;)&#xA;    }&#xA;```&#xA;(Note: This lint check does not flag assertions purely asserting nullness or non-nullness in Java code; these are typically more intended for tools usage than runtime checks.)"
        errorLine1="            assert(planes[0].getPixelStride() == 1);"
        errorLine2="            ~~~~~~">
        <location
            file="C:\Users\nalensa\EstesProj\EstesLibrary\opencv451_x86_64\java\src\org\opencv\android\JavaCamera2View.java"
            line="336"
            column="13"/>
    </issue>

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are never enabled in Android. Use `BuildConfig.DEBUG` conditional checks instead"
        category="Correctness"
        priority="6"
        summary="Ignored Assertions"
        explanation="Assertions will never be turned on in Android. (It was possible to enable it in Dalvik with `adb shell setprop debug.assert 1`, but it is not implemented in ART, the runtime for Android 5.0 and later.)&#xA;&#xA;This means that the assertion will never catch mistakes, and you should not use assertions from Java or Kotlin for debug build checking.&#xA;&#xA;Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which will be true only in debug builds, and false in release builds, and the compiler will completely remove all code inside the `if`-body from the app.&#xA;&#xA;For example, you can replace&#xA;```&#xA;    assert(speed > 0, { &quot;Message&quot; })    // Kotlin&#xA;    assert speed > 0 : &quot;Message&quot;        // Java&#xA;```&#xA;with&#xA;```&#xA;    if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) {&#xA;        throw new AssertionError(&quot;Message&quot;)&#xA;    }&#xA;```&#xA;(Note: This lint check does not flag assertions purely asserting nullness or non-nullness in Java code; these are typically more intended for tools usage than runtime checks.)"
        errorLine1="                assert(planes[0].getPixelStride() == 1);"
        errorLine2="                ~~~~~~">
        <location
            file="C:\Users\nalensa\EstesProj\EstesLibrary\opencv451_x86_64\java\src\org\opencv\android\JavaCamera2View.java"
            line="352"
            column="17"/>
    </issue>

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are never enabled in Android. Use `BuildConfig.DEBUG` conditional checks instead"
        category="Correctness"
        priority="6"
        summary="Ignored Assertions"
        explanation="Assertions will never be turned on in Android. (It was possible to enable it in Dalvik with `adb shell setprop debug.assert 1`, but it is not implemented in ART, the runtime for Android 5.0 and later.)&#xA;&#xA;This means that the assertion will never catch mistakes, and you should not use assertions from Java or Kotlin for debug build checking.&#xA;&#xA;Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which will be true only in debug builds, and false in release builds, and the compiler will completely remove all code inside the `if`-body from the app.&#xA;&#xA;For example, you can replace&#xA;```&#xA;    assert(speed > 0, { &quot;Message&quot; })    // Kotlin&#xA;    assert speed > 0 : &quot;Message&quot;        // Java&#xA;```&#xA;with&#xA;```&#xA;    if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) {&#xA;        throw new AssertionError(&quot;Message&quot;)&#xA;    }&#xA;```&#xA;(Note: This lint check does not flag assertions purely asserting nullness or non-nullness in Java code; these are typically more intended for tools usage than runtime checks.)"
        errorLine1="                assert(planes[2].getPixelStride() == 2);"
        errorLine2="                ~~~~~~">
        <location
            file="C:\Users\nalensa\EstesProj\EstesLibrary\opencv451_x86_64\java\src\org\opencv\android\JavaCamera2View.java"
            line="353"
            column="17"/>
    </issue>

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are never enabled in Android. Use `BuildConfig.DEBUG` conditional checks instead"
        category="Correctness"
        priority="6"
        summary="Ignored Assertions"
        explanation="Assertions will never be turned on in Android. (It was possible to enable it in Dalvik with `adb shell setprop debug.assert 1`, but it is not implemented in ART, the runtime for Android 5.0 and later.)&#xA;&#xA;This means that the assertion will never catch mistakes, and you should not use assertions from Java or Kotlin for debug build checking.&#xA;&#xA;Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which will be true only in debug builds, and false in release builds, and the compiler will completely remove all code inside the `if`-body from the app.&#xA;&#xA;For example, you can replace&#xA;```&#xA;    assert(speed > 0, { &quot;Message&quot; })    // Kotlin&#xA;    assert speed > 0 : &quot;Message&quot;        // Java&#xA;```&#xA;with&#xA;```&#xA;    if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) {&#xA;        throw new AssertionError(&quot;Message&quot;)&#xA;    }&#xA;```&#xA;(Note: This lint check does not flag assertions purely asserting nullness or non-nullness in Java code; these are typically more intended for tools usage than runtime checks.)"
        errorLine1="                    assert(addr_diff == 1);"
        errorLine2="                    ~~~~~~">
        <location
            file="C:\Users\nalensa\EstesProj\EstesLibrary\opencv451_x86_64\java\src\org\opencv\android\JavaCamera2View.java"
            line="365"
            column="21"/>
    </issue>

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are never enabled in Android. Use `BuildConfig.DEBUG` conditional checks instead"
        category="Correctness"
        priority="6"
        summary="Ignored Assertions"
        explanation="Assertions will never be turned on in Android. (It was possible to enable it in Dalvik with `adb shell setprop debug.assert 1`, but it is not implemented in ART, the runtime for Android 5.0 and later.)&#xA;&#xA;This means that the assertion will never catch mistakes, and you should not use assertions from Java or Kotlin for debug build checking.&#xA;&#xA;Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which will be true only in debug builds, and false in release builds, and the compiler will completely remove all code inside the `if`-body from the app.&#xA;&#xA;For example, you can replace&#xA;```&#xA;    assert(speed > 0, { &quot;Message&quot; })    // Kotlin&#xA;    assert speed > 0 : &quot;Message&quot;        // Java&#xA;```&#xA;with&#xA;```&#xA;    if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) {&#xA;        throw new AssertionError(&quot;Message&quot;)&#xA;    }&#xA;```&#xA;(Note: This lint check does not flag assertions purely asserting nullness or non-nullness in Java code; these are typically more intended for tools usage than runtime checks.)"
        errorLine1="                    assert(addr_diff == -1);"
        errorLine2="                    ~~~~~~">
        <location
            file="C:\Users\nalensa\EstesProj\EstesLibrary\opencv451_x86_64\java\src\org\opencv\android\JavaCamera2View.java"
            line="368"
            column="21"/>
    </issue>

    <issue
        id="Assert"
        severity="Warning"
        message="Assertions are never enabled in Android. Use `BuildConfig.DEBUG` conditional checks instead"
        category="Correctness"
        priority="6"
        summary="Ignored Assertions"
        explanation="Assertions will never be turned on in Android. (It was possible to enable it in Dalvik with `adb shell setprop debug.assert 1`, but it is not implemented in ART, the runtime for Android 5.0 and later.)&#xA;&#xA;This means that the assertion will never catch mistakes, and you should not use assertions from Java or Kotlin for debug build checking.&#xA;&#xA;Instead, perform conditional checking inside `if (BuildConfig.DEBUG) { }` blocks. That constant is a static final boolean which will be true only in debug builds, and false in release builds, and the compiler will completely remove all code inside the `if`-body from the app.&#xA;&#xA;For example, you can replace&#xA;```&#xA;    assert(speed > 0, { &quot;Message&quot; })    // Kotlin&#xA;    assert speed > 0 : &quot;Message&quot;        // Java&#xA;```&#xA;with&#xA;```&#xA;    if (BuildConfig.DEBUG &amp;&amp; !(speed > 0)) {&#xA;        throw new AssertionError(&quot;Message&quot;)&#xA;    }&#xA;```&#xA;(Note: This lint check does not flag assertions purely asserting nullness or non-nullness in Java code; these are typically more intended for tools usage than runtime checks.)"
        errorLine1="                    assert(yuv_bytes_offset == w * h);"
        errorLine2="                    ~~~~~~">
        <location
            file="C:\Users\nalensa\EstesProj\EstesLibrary\opencv451_x86_64\java\src\org\opencv\android\JavaCamera2View.java"
            line="393"
            column="21"/>
    </issue>

    <issue
        id="CustomViewStyleable"
        severity="Warning"
        message="By convention, the custom view (`CameraGLSurfaceView`) and the declare-styleable (`CameraBridgeViewBase`) should have the same name (various editor features rely on this convention)"
        category="Correctness"
        priority="6"
        summary="Mismatched Styleable/Custom View Name"
        explanation="The convention for custom views is to use a `declare-styleable` whose name matches the custom view class name. The IDE relies on this convention such that for example code completion can be offered for attributes in a custom view in layout XML resource files.&#xA;&#xA;(Similarly, layout parameter classes should use the suffix `_Layout`.)"
        errorLine1="        TypedArray styledAttrs = getContext().obtainStyledAttributes(attrs, R.styleable.CameraBridgeViewBase);"
        errorLine2="                                                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\nalensa\EstesProj\EstesLibrary\opencv451_x86_64\java\src\org\opencv\android\CameraGLSurfaceView.java"
            line="48"
            column="77"/>
    </issue>

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details."
        category="Correctness"
        priority="6"
        summary="Target SDK attribute is not targeting latest version"
        explanation="When your application runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.&#xA;&#xA;To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: http://developer.android.com/reference/android/os/Build.VERSION_CODES.html as well as follow this guide:&#xA;https://developer.android.com/distribute/best-practices/develop/target-sdk.html"
        url="https://developer.android.com/distribute/best-practices/develop/target-sdk.html"
        urls="https://developer.android.com/distribute/best-practices/develop/target-sdk.html,http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="        targetSdkVersion 28"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\nalensa\EstesProj\EstesLibrary\opencv451_x86_64\build.gradle"
            line="111"
            column="9"/>
    </issue>

    <issue
        id="UnsafeDynamicallyLoadedCode"
        severity="Warning"
        message="Dynamically loading code using `load` is risky, please use `loadLibrary` instead when possible"
        category="Security"
        priority="4"
        summary="`load` used to dynamically load code"
        explanation="Dynamically loading code from locations other than the application&apos;s library directory or the Android platform&apos;s built-in library directories is dangerous, as there is an increased risk that the code could have been tampered with. Applications should use `loadLibrary` when possible, which provides increased assurance that libraries are loaded from one of these safer locations. Application developers should use the features of their development environment to place application native libraries into the lib directory of their compiled APKs."
        errorLine1="            System.load(AbsPath);"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\nalensa\EstesProj\EstesLibrary\opencv451_x86_64\java\src\org\opencv\android\AsyncServiceHelper.java"
            line="347"
            column="13"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Warning"
        message="Unnecessary; SDK_INT is always >= 21"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="            if(mCamera == null &amp;&amp; Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {"
        errorLine2="                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\nalensa\EstesProj\EstesLibrary\opencv451_x86_64\java\src\org\opencv\android\CameraRenderer.java"
            line="49"
            column="35"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Warning"
        message="Unnecessary; SDK_INT is always >= 21"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\nalensa\EstesProj\EstesLibrary\opencv451_x86_64\java\src\org\opencv\android\CameraRenderer.java"
            line="63"
            column="17"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Warning"
        message="Unnecessary; SDK_INT is always >= 21"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="                if(mCamera == null &amp;&amp; Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {"
        errorLine2="                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\nalensa\EstesProj\EstesLibrary\opencv451_x86_64\java\src\org\opencv\android\JavaCameraView.java"
            line="84"
            column="39"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Warning"
        message="Unnecessary; SDK_INT is always >= 21"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\nalensa\EstesProj\EstesLibrary\opencv451_x86_64\java\src\org\opencv\android\JavaCameraView.java"
            line="98"
            column="21"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Warning"
        message="Unnecessary; SDK_INT is always >= 21"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH &amp;&amp; !android.os.Build.MODEL.equals(&quot;GT-I9100&quot;))"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\nalensa\EstesProj\EstesLibrary\opencv451_x86_64\java\src\org\opencv\android\JavaCameraView.java"
            line="167"
            column="25"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Warning"
        message="Unnecessary; SDK_INT is always >= 21"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\Users\nalensa\EstesProj\EstesLibrary\opencv451_x86_64\java\src\org\opencv\android\JavaCameraView.java"
            line="208"
            column="25"/>
    </issue>

</issues>
